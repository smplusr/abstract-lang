This is the manual of the SHLL (simple high level language) interpreter




Main Datastructures :

This language heavily relies on three main datastructures, being the dictionary, string and stream.
There only exists one instance of the main datatypes (dictionary, string and stream) needed, as defined in the language's standards.


Streams : 
The stream datastructure is used as an input method and defines a stream of characters.
A stream can be defined or redefined using its "update" method, which takes one string as argument.
Calling "update" without any arguments (argument is NULL) will give back the next character from the string.
If the stream's string has runned out of character (reached the null terminating character), the function will ask for user input.

Strings :
Strings are used to store arrays of characters, following the C standard, being null terminated.
Strings can be added, or stored, removed and searched.
Using the store or search method of the string datastructure will return a pointer to the requested sequence of characters,
thus making string comparison extremely easy.

Dictionaries :
Similar to any mainstream dictionary implementation, the dictionary is used to store key-value pairs.
Any pair can be inserted, retreived or removed using the set, get and delete method.
The dictionary is used to store builtin functions and user defined variables.





Main Philosophy of the Language :

The language is resolved around a minimal syntax, comprised of words.
Each word represent a value (if undefined, see Syntax Shortcuts), which is stored in a dictionary.
This makes the language able to define new variables on the fly.
It is possible, even if not recommended, to overwrite already defined elements in the dictionary.

A program is composed of a list of words given in a specific order.
The order is specified by the instruction themselves. It means that each instruction or keyword expects a given number of other words.
For example : 

define hello word hello

Here, "define" is the main instruction executed.
It takes a word used as a key and the return value of another keyword.
any other instruction or word given after this example will get processed.



Delimiters :
Word delimiters are : \t \r and space
string delimiters are user defined
