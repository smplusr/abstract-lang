




Main Plilosophy:
A program consists of a list of word, specifying procedures. Such procedures can then ask for other words (or result of other procedures) from the data stream and compute those values.
Each procedure can then return their computed value (which can be any type of data).


[Words]
Inside the language, words are stored inside a dictionary and serves as keys for associated value.
A word can contain any character that isn't the current stream / string delimiter (usualy '\n', '\t' or ' ').
There isn't really any difference between a callable word (procedure) or data, even though only procedure words should be executed (call to function pointer).
For the sake of simplicity, we will refer data or procedures as simply 'words'


[Strings]
Strings are uncomputed arrays of characters stored and accessible as any kind of other data.
Strings cannot be redefined, but they can be deleted and rewriten. Trying to recreate a string that already exists will return the already existing string.
Without going into too much detail about the possible implementations of the language, it is important to note that strings can serve as keys in the dictionary (word).
String comparison can and should be done using a hashing function, though hashes should not be directly available inside the language (purely implicit).


[Streams]
In order to evaluate words, the language uses data streams as its only input method.
Streams can be composed of strings, stored inside a word.
If the current stream isn't a string (if null stream), then user input must be asked for.




Syntax:

The language provides a no syntax kind of approach to programming.
There is no specific token that does a specific action, but only words.
That makes this language qualify as a 'concatenative' programming language.
Note that it also uses polish notation as words may require following words in a stream.


Syntax shortcuts:

Shortcuts exists inside the language.
For example, if an undefined word is contained in the current stream, the word itself (stored as a string) is returned.




Coding styles:

Usualy, when defining data strings, delimiters are quotes (").
When defining a procedure word, string delimiters should be backslashes (\)
When writing a procedure, each scope should be maked with corresponding tabulation (even if scoping isn't a constraint in the language).
Note the following example:

define proc-hello string \
	print sn string " Hello world! "
\

Here, we define a procedure (proc-hello) which prints a string (Hello world!) using the coding style defined earlier.




Inspirations and other notes:

The language is heavily inspired by FORTH, LISP and BASH.
Its paradigms are:
	- Unstructured (imperative)
	- Concatenative
